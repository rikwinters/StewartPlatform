//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
//{{LSL_DECLARATION

(*!
<Class
	Name               = "IONet"
	Revision           = "0.0"
	GUID               = "{C965CC83-4240-4864-AC8C-976B9A86291F}"
	RealtimeTask       = "false"
	CyclicTask         = "true"
	DefCyclictime      = "10 ms"
	BackgroundTask     = "false"
	Sigmatek           = "false"
	OSInterface        = "false"
	HighPriority       = "false"
	Automatic          = "false"
	UpdateMode         = "Prescan"
	SharedCommandTable = "true"
	Objectsize         = "(720,360)">
	<Channels>
		<Server Name="ClassSvr" GUID="{19B44CA5-5782-49A2-A611-525455C23F88}" Visualized="false" Initialize="false" WriteProtected="true" Retentive="false"/>
		<Server Name="Counter1" GUID="{3C6AAB30-B85F-44DA-B5E6-0FFC40AB26B1}" Visualized="false" Initialize="true" DefValue="2000" WriteProtected="false" Retentive="File"/>
		<Server Name="Counter2" GUID="{1F2B9C00-D76E-4FF5-85C1-E51225133EA4}" Visualized="false" Initialize="true" DefValue="8000" WriteProtected="false" Retentive="File"/>
		<Server Name="Counter3" GUID="{CD9F49EE-BB67-4B92-9E03-F0C65F1992CE}" Visualized="false" Initialize="true" DefValue="5000" WriteProtected="false" Retentive="File"/>
		<Server Name="Direction1" GUID="{85ABB4C2-B932-4D28-BF9D-A6DBA894C0FE}" Visualized="false" Initialize="true" DefValue="0" WriteProtected="false" Retentive="File"/>
		<Server Name="Direction2" GUID="{64B34C4B-EFE9-4658-AAFB-AF843FB3930F}" Visualized="false" Initialize="true" DefValue="1" WriteProtected="false" Retentive="File"/>
		<Server Name="Direction3" GUID="{DFA2BB11-7549-4EB0-BB32-6C26AF714199}" Visualized="false" Initialize="true" DefValue="0" WriteProtected="false" Retentive="File"/>
		<Server Name="Kd" GUID="{1E92B67D-0951-4DDF-BEE8-FD175E583416}" Visualized="false" Initialize="true" DefValue="0" WriteProtected="false" Retentive="File"/>
		<Server Name="Kp" GUID="{FF910E42-75DA-4A0F-8CEC-8625D31CEC11}" Visualized="false" Initialize="true" DefValue="5" WriteProtected="false" Retentive="File"/>
		<Server Name="Mode" GUID="{51A31849-5FD4-4170-916B-0FF2D1727F49}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="File"/>
		<Server Name="ModeCounter" GUID="{3459DFA1-391E-4A69-8302-8D518A9BF8B0}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="File"/>
		<Server Name="System_state" GUID="{98E84BF1-461A-4B9A-BBDF-DE3A70CB959C}" Visualized="false" Initialize="false" WriteProtected="false" Retentive="File"/>
		<Client Name="EnableCircuit" Required="true" Internal="false"/>
		<Client Name="I1" Required="true" Internal="false"/>
		<Client Name="I2" Required="true" Internal="false"/>
		<Client Name="I3" Required="true" Internal="false"/>
		<Client Name="I4" Required="true" Internal="false"/>
		<Client Name="I5" Required="true" Internal="false"/>
		<Client Name="I6" Required="true" Internal="false"/>
		<Client Name="O1" Required="true" Internal="false"/>
		<Client Name="O2" Required="true" Internal="false"/>
		<Client Name="O3" Required="true" Internal="false"/>
		<Client Name="O4" Required="true" Internal="false"/>
		<Client Name="O5" Required="true" Internal="false"/>
		<Client Name="O6" Required="true" Internal="false"/>
		<Client Name="Pressurize" Required="true" Internal="false"/>
		<Client Name="ResetButton" Required="true" Internal="false"/>
		<Client Name="ResetButtonLamp" Required="true" Internal="false"/>
		<Client Name="ResetEStop" Required="true" Internal="false"/>
		<Client Name="StartButton" Required="true" Internal="false"/>
		<Client Name="StartButtonLamp" Required="true" Internal="false"/>
		<Client Name="StartPumps" Required="true" Internal="false"/>
		<Client Name="StopButton" Required="true" Internal="false"/>
		<Client Name="StopButtonLamp" Required="true" Internal="false"/>
		<Client Name="SystemEnable" Required="true" Internal="false"/>
		<Client Name="SystemOKLamp" Required="true" Internal="false"/>
	</Channels>
</Class>
*)
IONet : CLASS
  //Servers:
	ClassSvr 	: SvrChCmd_DINT;
	Counter1 	: SvrCh_DINT;
	Counter2 	: SvrCh_DINT;
	Counter3 	: SvrCh_DINT;
	Direction1 	: SvrCh_UDINT;
	Direction2 	: SvrCh_DINT;
	Direction3 	: SvrCh_DINT;
	Kp 	: SvrCh_DINT;
	Kd 	: SvrCh_DINT;
	Mode 	: SvrCh_DINT;
	ModeCounter 	: SvrCh_DINT;
	System_state 	: SvrCh_DINT;
  //Clients:
	StartButton 	: CltCh_DINT;
	StartButtonLamp 	: CltCh_DINT;
	StopButton 	: CltCh_DINT;
	StopButtonLamp 	: CltCh_DINT;
	ResetButton 	: CltCh_DINT;
	ResetButtonLamp 	: CltCh_DINT;
	SystemEnable 	: CltCh_DINT;
	EnableCircuit 	: CltCh_DINT;
	SystemOKLamp 	: CltCh_DINT;
	StartPumps 	: CltCh_DINT;
	Pressurize 	: CltCh_DINT;
	ResetEStop 	: CltCh_DINT;
	O1 	: CltCh_DINT;
	O2 	: CltCh_DINT;
	O3 	: CltCh_DINT;
	O4 	: CltCh_DINT;
	O5 	: CltCh_DINT;
	O6 	: CltCh_DINT;
	I1 	: CltCh_DINT;
	I2 	: CltCh_DINT;
	I3 	: CltCh_DINT;
	I4 	: CltCh_DINT;
	I5 	: CltCh_DINT;
	I6 	: CltCh_DINT;
  //Variables:
  //Functions:
	
	FUNCTION VIRTUAL GLOBAL Init;
	
	FUNCTION VIRTUAL GLOBAL CyWork
		VAR_INPUT
			EAX 	: UDINT;
		END_VAR
		VAR_OUTPUT
			state (EAX) 	: UDINT;
		END_VAR;
	
	FUNCTION LimitOutput
		VAR_INPUT
			unlimited_output 	: DINT;
		END_VAR
		VAR_OUTPUT
			limited_output 	: DINT;
		END_VAR;
  //Tables:
	FUNCTION @STD
		VAR_OUTPUT
			ret_code	: CONFSTATES;
		END_VAR;
	FUNCTION GLOBAL TAB @CT_;
END_CLASS;

//}}LSL_DECLARATION


FUNCTION GLOBAL TAB IONet::@CT_
0$UINT,
2#0100000000000010$UINT, //TY_IONET
0$UINT, 0$UINT, (SIZEOF(::IONet))$UINT, 
12$UINT, 24$UINT, 0$UINT, 
TO_UDINT(3417967401), "IONet", //Class
TO_UDINT(0), 0, 0$UINT, 0$UINT, //Baseclass
//Servers:
(::IONet.ClassSvr.pMeth)$UINT, _CH_CMD$UINT, 2#0000000000000000$UINT, TO_UDINT(619352855), "ClassSvr", 
(::IONet.Counter1.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(547260585), "Counter1", 
(::IONet.Counter2.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(3113736467), "Counter2", 
(::IONet.Counter3.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(3465603461), "Counter3", 
(::IONet.Direction1.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(3782965927), "Direction1", 
(::IONet.Direction2.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(2020748061), "Direction2", 
(::IONet.Direction3.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(259333003), "Direction3", 
(::IONet.Kp.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(960484805), "Kp", 
(::IONet.Kd.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(602210744), "Kd", 
(::IONet.Mode.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(2707401247), "Mode", 
(::IONet.ModeCounter.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(2564985527), "ModeCounter", 
(::IONet.System_state.pMeth)$UINT, _CH_SVR$UINT, 2#0000000000011000$UINT, TO_UDINT(1707214151), "System_state", 
//Clients:
(::IONet.StartButton.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(1214826680), "StartButton", 
(::IONet.StartButtonLamp.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(1027290706), "StartButtonLamp", 
(::IONet.StopButton.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(910407337), "StopButton", 
(::IONet.StopButtonLamp.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(1245504160), "StopButtonLamp", 
(::IONet.ResetButton.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(3049434987), "ResetButton", 
(::IONet.ResetButtonLamp.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(3550881602), "ResetButtonLamp", 
(::IONet.SystemEnable.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(3093689892), "SystemEnable", 
(::IONet.EnableCircuit.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(333119294), "EnableCircuit", 
(::IONet.SystemOKLamp.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(1442113820), "SystemOKLamp", 
(::IONet.StartPumps.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(2888713881), "StartPumps", 
(::IONet.Pressurize.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(1463743272), "Pressurize", 
(::IONet.ResetEStop.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(2927587190), "ResetEStop", 
(::IONet.O1.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(1743143183), "O1", 
(::IONet.O2.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(4277080245), "O2", 
(::IONet.O3.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(2313691171), "O3", 
(::IONet.O4.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(395097472), "O4", 
(::IONet.O5.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(1619756310), "O5", 
(::IONet.O6.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(4186100908), "O6", 
(::IONet.I1.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(834463369), "I1", 
(::IONet.I2.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(2830481203), "I2", 
(::IONet.I3.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(3753019301), "I3", 
(::IONet.I4.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(1104548358), "I4", 
(::IONet.I5.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(919675536), "I5", 
(::IONet.I6.pCh)$UINT, _CH_CLT_DATA$UINT, 2#0000000000000010$UINT, TO_UDINT(2950198058), "I6", 
END_FUNCTION


#define USER_CNT_IONet 0

TYPE
	_LSL_STD_VMETH	: STRUCT
			CmdTable	: CMDMETH;
			UserFcts	: ARRAY[0..USER_CNT_IONet] OF ^Void;
	END_STRUCT;
END_TYPE

FUNCTION IONet::@STD
	VAR_OUTPUT
		ret_code	: CONFSTATES;
	END_VAR
	VAR
		vmt	: _LSL_STD_VMETH;
	END_VAR

	//Command Methods
	InitCmdTable (nCmd := nSTDCMD + USER_CNT_IONet, pCmd := #vmt.CmdTable);
	vmt.CmdTable.Init		:= #Init();
	vmt.CmdTable.CyWork		:= #CyWork();
	ClassSvr.pMeth		:= StoreCmd (pCmd := #vmt.CmdTable, SHARED);

	IF ClassSvr.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Counter1.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Counter1.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Counter2.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Counter2.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Counter3.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Counter3.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Direction1.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Direction1.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Direction2.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Direction2.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Direction3.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Direction3.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Kp.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Kp.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Kd.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Kd.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	Mode.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF Mode.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	ModeCounter.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF ModeCounter.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;
	System_state.pMeth			:= StoreMethod( #M_RD_DIRECT(), #M_WR_DIRECT() );
	IF System_state.pMeth THEN
		ret_code	:= C_OK;
	ELSE
		ret_code	:= C_OUTOF_NEAR;
		RETURN;
	END_IF;

END_FUNCTION

//{{LSL_IMPLEMENTATION

FUNCTION VIRTUAL GLOBAL IONet::Init
  if _FirstScan then
    Kp := 5;
    Kd := 0;
    Direction1 := 0;
    Direction2 := 1;
    Direction3 := 0;
    Counter1 := 2000;
    Counter2 := 6000;
    Counter3 := 6000;
    System_state := 0;         // System state: 0 = SAFETY, 1 = ON, 2 = IDLE
    // SAFETY: a safety reset is required to go to System_state IDLE
    // ON: system is doing a sequence of movements
    // IDLE: System slowly moves to lowest position and stays there (controlled)
    Mode := 0;          // Mode indicates which movement to perform
    ModeCounter := 0;   // Counts when to shift to the next mode
    // Mode 1: up-down Z-direction (cylinder 1-6 use direction1 and counter1)
    // Mode 2: rotate yaw (cylinder 1,3,5 use direction1 and counter1, others use direction2 and counter2)
    // Mode 3: simultaneous roll-pitch (cylinder 1&6 use direction1 and counter1, cylinder 2&3 use direction2 and counter2, others use direction3 and counter3)
    // Mode 4: planar x-y direction TODO
  end_if;

END_FUNCTION

FUNCTION VIRTUAL GLOBAL IONet::CyWork
	VAR_INPUT
		EAX 	: UDINT;
	END_VAR
	VAR_OUTPUT
		state (EAX) 	: UDINT;
	END_VAR

  // Read all inputs
	StartButton := StartButton.Read();
	StopButton := StopButton.Read();
	ResetButton := ResetButton.Read();
  SystemEnable := SystemEnable.Read(); // Safety circuit input
  I1 := I1.Read();
  I2 := I2.Read();
  I3 := I3.Read();
  I4 := I4.Read();
  I5 := I5.Read();
  I6 := I6.Read();
  
  // If safety circuit is OK, enable circuit and pumps
  // THIS CHECK SHOULD ALWAYS BE AT THE BEGINNING OF THE LOOP
  // ***************************************
  if SystemEnable = 1 then
    SystemOKLamp := 1;
    EnableCircuit := 1;
    StartPumps := 1;
    // TODO: pressure low should prevent system from falling down but this does not work currently
    Pressurize := 1; // no outwards cylinder movement when 0
  else
    // Set state variables
    System_state := 0;      // System state SAFETY
    Mode := 0;              // Mode starts at 0 again
    ModeCounter := 0;       // Set counter back to 0
    // Turn everything off
    ResetEStop := 0;
    SystemOKLamp := 0;
    EnableCircuit := 0;
    StartPumps := 0;
    Pressurize := 0;        // no outwards cylinder movement when 0
  end_if;
  
  // Handle inputs of stop and start button
  if StopButton = 1 then
    // StopButton (red) lets the system go to state 2 (IDLE), transition only possible from state 1 (ON)
    if System_state = 1 then
      // Stop state ON and go to state IDLE
      System_state := 2;
    end_if;
    // Otherwise this does nothing
  elsif StartButton = 1 then
    // StartButton (green) lets the system go to state 1 (ON), transition only possible from state 2 (IDLE)
    if System_state = 2 then
      // Stop state IDLE and go to state ON
      System_state := 1;
    end_if;
    // Otherwise this does nothing
  end_if;
  
  // Provide feedback on the current system state
  if System_state = 0 then
    StartButtonLamp := 0;
    StopButtonLamp := 0;
    ResetButtonLamp := 1;
  elsif System_state = 1 then
    StartButtonLamp := 1;
    StopButtonLamp := 0;
    ResetButtonLamp := 0;
  elsif System_state = 2 then
    StartButtonLamp := 0;
    StopButtonLamp := 1;
    ResetButtonLamp := 0;
  end_if;  
    
  // SYSTEM BEHAVIOR
  // State IDLE: slowly move downwards
  if System_state = 2 then
    O1 := -4000;
    O2 := -4000;
    O3 := -4000;
    O4 := -4000;
    O5 := -4000;
    O6 := -4000;
  
  // State ON: perform movements according to the current Mode
  elsif System_state = 1 then
    // TODO: incorporate different Modes
    if Direction1 = 0 then
      Counter1 += 50;
      if Counter1 >= 8000 then
        Direction1 := 1;
      end_if;
    else
      Counter1 -= 50;
      if Counter1 <= 2000 then
        Direction1 := 0;
      end_if;
    end_if;
    if Direction2 = 0 then
      Counter2 += 50;
      if Counter2 >= 8000 then
        Direction2 := 1;
      end_if;
    else
      Counter2 -= 50;
      if Counter2 <= 2000 then
        Direction2 := 0;
      end_if;
    end_if;
    if Direction3 = 0 then
      Counter3 += 50;
      if Counter3 >= 8000 then
        Direction3 := 1;
      end_if;
    else
      Counter3 -= 50;
      if Counter3 <= 2000 then
        Direction3 := 0;
      end_if;
    end_if;
    O1 := (Counter1-I1)*Kp;
    O2 := (Counter2-I2)*Kp;
    O3 := (Counter2-I3)*Kp;
    O4 := (Counter3-I4)*Kp;
    O5 := (Counter3-I5)*Kp;
    O6 := (Counter1-I6)*Kp;
    
  // State SAFETY: Do nothing (since we cannot control the cylinders anyway)
  else
    O1 := 0;
    O2 := 0;
    O3 := 0;
    O4 := 0;
    O5 := 0;
    O6 := 0;
  end_if;

  // Limit the outputs to their maximum range
  O1 := LimitOutput(unlimited_output:=O1);
  O2 := LimitOutput(unlimited_output:=O2);
  O3 := LimitOutput(unlimited_output:=O3);
  O4 := LimitOutput(unlimited_output:=O4);
  O5 := LimitOutput(unlimited_output:=O5);
  O6 := LimitOutput(unlimited_output:=O6);
  
  // Pressing the ResetButton (blue) resets the safety circuit
  // SHOULD ALWAYS BE AT THE END OF THE LOOP
  // ***************************************
  if ResetButton = 1 then
    ResetEStop := 1;
    // Go to state 2 (IDLE) for now, if safety reset fails we go back to state 0 (SAFETY) anyway
    System_state := 2;
  end_if;
  
  // Write all outputs
  SystemOKLamp.Write(SystemOKLamp);
  EnableCircuit.Write(EnableCircuit);
  StartPumps.Write(StartPumps);
  Pressurize.Write(Pressurize);
  ResetEStop.Write(ResetEStop);
  StartButtonLamp.Write(StartButtonLamp);
  StopButtonLamp.Write(StopButtonLamp);
  ResetButtonLamp.Write(ResetButtonLamp);
  O1.Write(O1);
  O2.Write(O2);
  O3.Write(O3);
  O4.Write(O4);
  O5.Write(O5);
  O6.Write(O6);
  
  state := READY;

END_FUNCTION

// Saturate the outputs in range -10000 to +10000
FUNCTION IONet::LimitOutput
	VAR_INPUT
		unlimited_output 	: DINT;
	END_VAR
	VAR_OUTPUT
		limited_output 	: DINT;
	END_VAR
  
  if unlimited_output > 10000 then
    limited_output := 10000;
  elsif unlimited_output < -10000 then
    limited_output := -10000;
  else
    limited_output := unlimited_output;
  end_if;
  
END_FUNCTION
