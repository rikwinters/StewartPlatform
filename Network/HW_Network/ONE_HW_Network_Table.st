//This file was generated by the LASAL2 CodeGenerator  -- 
//Please, do not edit this file (it might be overwritten by the next generator run)
#define OBJECTS_CONFIG

//Define part of class SdiasBase
//Address to access the Dataobject list via SPI SDO Read
#define SDIAS_SPI_DATA_OBJECT_LIST_PAGE_ADDRESS 16#FFFF
#define SDIAS_SPI_DATA_OBJECT_LIST_PAGE_OFFSET 16#00
#define SDIAS_SPI_DATA_OBJECT_LIST_IDENTIFIER 16#12345678

//Defines the number of optional list elements in the SPI List

#define SDIAS_SPI_NUMBER_OF_OPTIONAL_ELEMENTS 7   

//#pragma message("EisMic 27.06.2014 14:44 \ Noch schauen ob ichs besser machen kann")
#define SDIAS_SPI_HEADER_BEFORE_OPTIONAL_ELEMENTS 16#18
#define SDIAS_SPI_HARDWARE_VERSION_OFFSET 16#C
#define SDIAS_SPI_VENDOR_ID_OFFSET 16#0

//SPI List IDs
#define SDIAS_SPI_IDENTIFICATION_LIST_ID 1
#define SDIAS_SPI_FLASH_CONFIGURATION_ID 2
#define SDIAS_SPI_VENDOR_NAME_ID 3
#define SDIAS_SPI_DEVICE_NAME_ID 4
#define SDIAS_SPI_SERIAL_NUMBER_ID 5
#define SDIAS_SPI_ORDERING_NUMBER_ID 6
#define SDIAS_SPI_DOCUMENTATION_PDF_ID 7
#define SDIAS_SPI_CALIB_DATA_ID 10
#define SDIAS_SPI_PDO_INFORMATION_ID 128
#include "..\..\Class\SdiasManager\SdiasManager.h"
#include <.\lsl_st_hardwaretree.h>
#include "..\..\Class\SdiasBase\SdiasBase.h"
#include "..\..\Class\HwControl\HwControl.h"
//Define part of class AM441
#define DEVICE_ID_AM441             1017

#define AM441_ADDR_CYC_WRITE        16#000
#define AM441_ADDR_CYC_READ         16#080
#define AM441_ADDR_CFG_FIRMWARE     16#100
#define AM441_ADDR_STATE_FIRMWARE   16#180

#define AM441_SDO_RESPONSE_TIMEOUT  SDIAS_SDO_TIMEOUT * 2

#define AM441_NUMBER_OF_ANALOG_IN   4
#define AM441_INVALID_VALUE         16#80000010$DINT

#define AM441_FIRMWARE_MIN          -10000
#define AM441_FIRMWARE_MAX          10000
//Define part of class BusInterfaceSDIASInternal
#define BUSIF_INTERNAL_MAX_NR_DO 100

// Defines for Mutex Generation
#define INTERNAL_STR_MUTEX_NAME_SEPERATOR ".."
#define INTERNAL_MUTEX_NAME_END_LENGTH 5
#define INTERNAL_MUTEX_NAME_MAX_LENGTH 32
#include "..\..\Source\BusInterface.h"
#include <.\lsl_st_mt.h>
//Define part of class DM161
#define DEVICE_ID_DM161 1029
#include "..\..\Class\HwControl\watchdog.h"
//Define part of class SafetyManager
#define LogBufferSize 1000
#include "..\..\Class\SafetyManager\SafetyManager.h"
#include <.\lsl_st_safetydll.h>
//Define part of class SdiasManager
#define SDIAS_SDO_MAX_LENGTH              128
#define SDIAS_SDO_RINGBUFFER_NO            64
#define SDIAS_SDO_CHANNEL_NO                3   // fixed in the VI hardware to be 3

// watchdog trigger interval (after 130ms of no trigger the SDIAS HW goes into reset again and takes at least another 10ms to be ready again)
#define SDIAS_WATCHDOG_TRIGGER_TIME        40

// time needed by sdias modules to start up after the watchdog is triggered the first time in ms
#define SDIAS_HARDWARE_STARTUP_TIME        15

// sdias manager needs 2 ticks to handle event for read task (measure sync time)
#define SDIAS_SYNC_MEASURE_TICKS            2

// after activating the PLL SyncOut it takes 3 cycles until the SDIAS sync can be injected
#define SDIAS_CYCLES_WAIT_AFTER_SYNC_ENABLE 3

// wait 1 bus cycle at start to get valid numbers in the task info
#define SDIAS_TASKINFO_READY_TICKS          1

// time to wait (in ms) until other tasks in the same or lower priority than post init have done their stuff
#define SDIAS_WAIT_TIME_IN_POST_INIT        1

#define SIZE_PER_SDIAS_CLIENT               16#0400

#define SDIAS_OFFSET_HW_CONFIG              16#FF00
#define SDIAS_OFFSET_TASK_EVENT_IDS         16#FF10
#define SDIAS_OFFSET_FEATURE_INFO           16#FF18
#define SDIAS_OFFSET_APPLI_LED_STATES       16#FF20
#define SDIAS_OFFSET_SYNC_INJECTION_CFG     16#FF3D
#define SDIAS_OFFSET_TRIGGER_UNIT_SETUP_0   16#FF41
#define SDIAS_OFFSET_TRIGGER_UNIT_SETUP_1   16#FF45
#define SDIAS_OFFSET_TASK_START_CFG_0       16#FF60
#define SDIAS_OFFSET_TASK_CONFIG_0          16#FF86
#define SDIAS_OFFSET_TASK_CONFIG_1          16#FF96
#define SDIAS_OFFSET_TASK_INFO_1            16#FF94
#define SDIAS_OFFSET_TASK_HANDSHAKE_1       16#FF9B
#define SDIAS_OFFSET_TASK_CONFIG_2          16#FFA6

#define SDIAS_RETRIES_ALLOWED         2

// mask to get global error flag out of message counter byte of SDO responses
#define SDIAS_MASK_GLOBAL_ERROR_FLAG        16#80

// mask to get message counter out of message counter byte of SDO responses
#define SDIAS_MASK_MESSAGE_COUNTER          16#3F


#define SDIAS_EVENT_MASK_ID_SYNC_OUT0       16#10
#define SDIAS_EVENT_MASK_ID_SYNC_OUT1       16#11
#define SDIAS_EVENT_MASK_ID_SYNC_OUT2       16#12
#define SDIAS_EVENT_MASK_ID_SYNC_OUT3       16#13

#define SDIAS_PLACE_NO_MODULE_ADDED_SO_FAR  16#80000000

#define SDIAS_TRIGGER_UNIT_BYTE_SIZE        2

#define SDIAS_WAIT_TIME_FIRMWARE_HANDSHAKE  5 * 1000

// if the firmware version is below this, there might be problems with SCP111 and other modules => print warning at startup
#define SDIAS_FW_VERSION_SDO_ERROR_FIXED    16#120   

// timeout for blocking the init during initialisation (in ms)
#define SDIAS_INIT_BLOCK_TIMEOUT            20 * 1000

#define SDIAS_MUTEX_NAME_END_LENGTH 3
#define SDIAS_MUTEX_NAME_MAX_LENGTH 32
#define SDIAS_MUTEX_STR_SEPERATOR   ".."

//#define SDIAS_RT_TIME_MEASUREMENT
#ifdef SDIAS_RT_TIME_MEASUREMENT
  #pragma message("ATTENTION: SDIAS real time measurement is active and needs additional ressources in the realtime task")
#endif


(* SDIAS data object commands  *)
#define	 SDIAS_CMD_END							  0x00			(* End command										          *)
#define	 SDIAS_CMD_ACC_MEMORY				  0x01			(* Access dpram memory								      *)
#define	 SDIAS_CMD_ACC_CONTROL				0x02			(* Access dpram control memory						  *)
#define	 SDIAS_CMD_GLOBAL						  0x03			(* SDIAS global command								      *)
#define	 SDIAS_CMD_COPY_LOCAL					0x04			(* DPRAM copy command in local dpram				*)
#define	 SDIAS_CMD_JMP_LOCAL					0x05			(* DPRAM jump command in local dpram 				*)

(* SDIAS defines for data object handling *)
// Write data oject list
#define	 SDIAS_DOL_WRITE_USAGE_DOL_EMPTY	  0x20			(* Usage of empty write dol list (wachtdog trigger + end command)   *)
#define	 SDIAS_DOL_WRITE_USAGE_DTA_EMPTY	  0x03			(* Usage of empty write dol data (DO ctrl of 2x copy command for task information + DO ctrl of watchdog trigger      *)
#define	 SDIAS_DOL_WRITE_OFFSET_END_CMD			0x10			(* One data object in list - offset = 1 DO size = 0x10						  *)
#define	 SDIAS_DOL_WRITE_OFFSET_FIRST_DTA		0x02			(* Offset of first data byte of second copy command = 2 (DO ctrl)   *)
#define	 SDIAS_DOL_WRITE_OFFSET_LAST_DTA		0x02			(* Offset of last data byte of second copy command = 2 (DO ctrl )   *)

// Read data oject list
#define	 SDIAS_DOL_READ_USAGE_DOL_EMPTY	    0x30			(* Usage of empty read dol list (2x task info copy command + end command)   *)
#define	 SDIAS_DOL_READ_USAGE_DTA_EMPTY	    0x0D			(* Usage of empty write dol data (DO ctrl of 2x copy command for task information + DO ctrl of watchdog trigger      *)
#define	 SDIAS_DOL_READ_OFFSET_END_CMD			0x20			(* One data object in list - offset = 1 DO size = 0x10						          *)
#define	 SDIAS_DOL_READ_OFFSET_FIRST_DTA		0x07			(* Offset of first data byte of second copy command = 7 = DO state          *)
#define	 SDIAS_DOL_READ_OFFSET_LAST_DTA		  0x0C			(* Offset of last data byte of second copy command = 12 (last byte of task information)       *)

//Versionsnumber where SDIAS SPI Read Accesses are available
#define  SDIAS_SDO_SPI_FIRMWARE_VERSION_AVAILABLE 16#0120

//error info mask
#define  SDIAS_ERROR_INFO_MASK    2#1000011000011111
//Define part of class SdiasPLC
#define SDIASM_OBJECT_PATH            16#88000002   // Object Path for VSDIASmanager Length = 2 (First 2byte), Domain = 0 (3rd byte), Escape Sequence SDIAS (4th byte)


FUNCTION GLOBAL TAB ONE_HW_Network
-1$UINT, 0$UINT, 
0$UINT, 0$UINT,

15$UDINT,
TO_UDINT(56211589), "AM441", 1$UINT, 30$UINT, 2$UINT,
TO_UDINT(3882880897), "BusInterfaceSDIASInternal", 1$UINT, 27$UINT, 0$UINT,
TO_UDINT(4282685340), "DM161", 1$UINT, 9$UINT, 1$UINT,
TO_UDINT(2471641665), "HwControl", 4$UINT, 2$UINT, 1$UINT,
TO_UDINT(1193052171), "HwControlBase", 1$UINT, 10$UINT, 0$UINT,
TO_UDINT(4260294091), "HWRtPostScan", 1$UINT, 0$UINT, 1$UINT,
TO_UDINT(2225119864), "MerkerEx", 1$UINT, 21$UINT, 3$UINT,
TO_UDINT(1799751072), "SafetyManager", 2$UINT, 2$UINT, 1$UINT,
TO_UDINT(3175101883), "SdiasBase", 1$UINT, 52$UINT, 0$UINT,
TO_UDINT(4173303375), "SdiasHubBase", 1$UINT, 10$UINT, 1$UINT,
TO_UDINT(2118381352), "SdiasManager", 1$UINT, 81$UINT, 1$UINT,
TO_UDINT(1159122596), "SdiasPLC", 1$UINT, 44$UINT, 1$UINT,
TO_UDINT(1850111279), "String", 1$UINT, 10$UINT, 3$UINT,
TO_UDINT(2898603620), "StringInternal", 1$UINT, 81$UINT, 0$UINT,
TO_UDINT(3232495061), "VirtualBaseInit", 1$UINT, 3$UINT, 0$UINT,

_NO_ATTR, TO_UDINT(504218016), "AM4411", 
_NO_ATTR, TO_UDINT(2265223194), "AM4412", 


_NO_ATTR, TO_UDINT(2056942671), "DM1611", 

_NO_ATTR, TO_UDINT(2190789875), "HWCONTROL1", 


1$UINT, TO_UDINT(1673205898), "HWCONTROL1\HWRTPOSTSCAN", 

1$UINT, TO_UDINT(1811543353), "AM4411\_BASE\SERIALNOSTR\MERKEREX0", 
1$UINT, TO_UDINT(3471941205), "AM4412\_BASE\SERIALNOSTR\MERKEREX0", 
1$UINT, TO_UDINT(1089285877), "DM1611\_BASE\SERIALNOSTR\MERKEREX0", 

1$UINT, TO_UDINT(1778590035), "HWCONTROL1\SAFETYMANAGER", 


1$UINT, TO_UDINT(1007630054), "SDIASPLC1\SDIASHUBBASE1", 

1$UINT, TO_UDINT(4015996540), "SDIASPLC1\SDIASMANAGER1", 

_NO_ATTR, TO_UDINT(1378000520), "SDIASPLC1", 

1$UINT, TO_UDINT(814212766), "AM4411\_BASE\SERIALNOSTR", 
1$UINT, TO_UDINT(2479972407), "AM4412\_BASE\SERIALNOSTR", 
1$UINT, TO_UDINT(2011818843), "DM1611\_BASE\SERIALNOSTR", 



//Internal connections
0$UDINT,
10$UDINT,
TO_UDINT(0), "SerialNoStr", TO_UDINT(12),
TO_UDINT(1), "SerialNoStr", TO_UDINT(13),
TO_UDINT(2), "SerialNoStr", TO_UDINT(14),
TO_UDINT(3), "HWRtPostScan", TO_UDINT(4),
TO_UDINT(3), "SafetyManager", TO_UDINT(8),
TO_UDINT(11), "SdiasManager1", TO_UDINT(10),
TO_UDINT(11), "SdiasHubBase1", TO_UDINT(9),
TO_UDINT(12), "MerkerEx0", TO_UDINT(5),
TO_UDINT(13), "MerkerEx0", TO_UDINT(6),
TO_UDINT(14), "MerkerEx0", TO_UDINT(7),
0$UDINT,
11$UDINT,
TO_UDINT(0), "SdiasIn", TO_UDINT(9), "ClassSvr",
TO_UDINT(1), "SdiasIn", TO_UDINT(9), "ClassSvr",
TO_UDINT(2), "SdiasIn", TO_UDINT(9), "ClassSvr",
TO_UDINT(4), "toHwControlBase", TO_UDINT(3), "Control",
TO_UDINT(8), "To_HwControl", TO_UDINT(3), "Control",
TO_UDINT(9), "ToNextSDIAS", TO_UDINT(10), "ClassState",
TO_UDINT(10), "ToBusInterface", TO_UDINT(11), "CallCommand",
TO_UDINT(11), "ToHwControl", TO_UDINT(3), "Control",
TO_UDINT(12), "DataBuffer", TO_UDINT(5), "m_udLength",
TO_UDINT(13), "DataBuffer", TO_UDINT(6), "m_udLength",
TO_UDINT(14), "DataBuffer", TO_UDINT(7), "m_udLength",

//Initialization values
0$UDINT,
57$UDINT,
TO_UDINT(0), "LEDControl", TO_UDINT(0),//|HW_Network.AM4411.LEDControl;
TO_UDINT(0), "Place", TO_UDINT(1),//|HW_Network.AM4411.Place;
TO_UDINT(0), "Required", TO_UDINT(1),//|HW_Network.AM4411.Required;
TO_UDINT(0), "AI1Config", TO_UDINT(1),//|HW_Network.AM4411.AI1Config;
TO_UDINT(0), "AI1_Min", TO_UDINT(-10000),//|HW_Network.AM4411.AI1_Min;
TO_UDINT(0), "AI1_Max", TO_UDINT(10000),//|HW_Network.AM4411.AI1_Max;
TO_UDINT(0), "AI2Config", TO_UDINT(1),//|HW_Network.AM4411.AI2Config;
TO_UDINT(0), "AI2_Min", TO_UDINT(-10000),//|HW_Network.AM4411.AI2_Min;
TO_UDINT(0), "AI2_Max", TO_UDINT(10000),//|HW_Network.AM4411.AI2_Max;
TO_UDINT(0), "AI3Config", TO_UDINT(1),//|HW_Network.AM4411.AI3Config;
TO_UDINT(0), "AI3_Min", TO_UDINT(-10000),//|HW_Network.AM4411.AI3_Min;
TO_UDINT(0), "AI3_Max", TO_UDINT(10000),//|HW_Network.AM4411.AI3_Max;
TO_UDINT(0), "AI4Config", TO_UDINT(1),//|HW_Network.AM4411.AI4Config;
TO_UDINT(0), "AI4_Min", TO_UDINT(-10000),//|HW_Network.AM4411.AI4_Min;
TO_UDINT(0), "AI4_Max", TO_UDINT(10000),//|HW_Network.AM4411.AI4_Max;
TO_UDINT(0), "AO1_Min", TO_UDINT(-10000),//|HW_Network.AM4411.AO1_Min;
TO_UDINT(0), "AO1_Max", TO_UDINT(10000),//|HW_Network.AM4411.AO1_Max;
TO_UDINT(0), "AO2_Min", TO_UDINT(-10000),//|HW_Network.AM4411.AO2_Min;
TO_UDINT(0), "AO2_Max", TO_UDINT(10000),//|HW_Network.AM4411.AO2_Max;
TO_UDINT(0), "AO3_Min", TO_UDINT(-10000),//|HW_Network.AM4411.AO3_Min;
TO_UDINT(0), "AO3_Max", TO_UDINT(10000),//|HW_Network.AM4411.AO3_Max;
TO_UDINT(0), "AO4_Min", TO_UDINT(-10000),//|HW_Network.AM4411.AO4_Min;
TO_UDINT(0), "AO4_Max", TO_UDINT(10000),//|HW_Network.AM4411.AO4_Max;
TO_UDINT(1), "LEDControl", TO_UDINT(0),//|HW_Network.AM4412.LEDControl;
TO_UDINT(1), "Place", TO_UDINT(2),//|HW_Network.AM4412.Place;
TO_UDINT(1), "Required", TO_UDINT(1),//|HW_Network.AM4412.Required;
TO_UDINT(1), "AI1Config", TO_UDINT(1),//|HW_Network.AM4412.AI1Config;
TO_UDINT(1), "AI1_Min", TO_UDINT(-10000),//|HW_Network.AM4412.AI1_Min;
TO_UDINT(1), "AI1_Max", TO_UDINT(10000),//|HW_Network.AM4412.AI1_Max;
TO_UDINT(1), "AI2Config", TO_UDINT(1),//|HW_Network.AM4412.AI2Config;
TO_UDINT(1), "AI2_Min", TO_UDINT(-10000),//|HW_Network.AM4412.AI2_Min;
TO_UDINT(1), "AI2_Max", TO_UDINT(10000),//|HW_Network.AM4412.AI2_Max;
TO_UDINT(1), "AI3_Min", TO_UDINT(-10000),//|HW_Network.AM4412.AI3_Min;
TO_UDINT(1), "AI3_Max", TO_UDINT(10000),//|HW_Network.AM4412.AI3_Max;
TO_UDINT(1), "AI4_Min", TO_UDINT(-10000),//|HW_Network.AM4412.AI4_Min;
TO_UDINT(1), "AI4_Max", TO_UDINT(10000),//|HW_Network.AM4412.AI4_Max;
TO_UDINT(1), "AO1_Min", TO_UDINT(-10000),//|HW_Network.AM4412.AO1_Min;
TO_UDINT(1), "AO1_Max", TO_UDINT(10000),//|HW_Network.AM4412.AO1_Max;
TO_UDINT(1), "AO2_Min", TO_UDINT(-10000),//|HW_Network.AM4412.AO2_Min;
TO_UDINT(1), "AO2_Max", TO_UDINT(10000),//|HW_Network.AM4412.AO2_Max;
TO_UDINT(1), "AO3_Min", TO_UDINT(-10000),//|HW_Network.AM4412.AO3_Min;
TO_UDINT(1), "AO3_Max", TO_UDINT(10000),//|HW_Network.AM4412.AO3_Max;
TO_UDINT(1), "AO4_Min", TO_UDINT(-10000),//|HW_Network.AM4412.AO4_Min;
TO_UDINT(1), "AO4_Max", TO_UDINT(10000),//|HW_Network.AM4412.AO4_Max;
TO_UDINT(2), "LEDControl", TO_UDINT(0),//|HW_Network.DM1611.LEDControl;
TO_UDINT(2), "Place", TO_UDINT(0),//|HW_Network.DM1611.Place;
TO_UDINT(2), "Required", TO_UDINT(1),//|HW_Network.DM1611.Required;
TO_UDINT(5), "ThreadSafe", TO_UDINT(0),//|HW_Network.SerialNoStr\_base\AM4411\MerkerEx0.ThreadSafe;
TO_UDINT(6), "ThreadSafe", TO_UDINT(0),//|HW_Network.SerialNoStr\_base\AM4412\MerkerEx0.ThreadSafe;
TO_UDINT(7), "ThreadSafe", TO_UDINT(0),//|HW_Network.SerialNoStr\_base\DM1611\MerkerEx0.ThreadSafe;
TO_UDINT(9), "SplitterPlace", TO_UDINT(0),//|HW_Network.SdiasPLC1\SdiasHubBase1.SplitterPlace;
TO_UDINT(10), "DeviceID", TO_UDINT(0),//|HW_Network.SdiasPLC1\SdiasManager1.DeviceID;
TO_UDINT(11), "CycleTime", TO_UDINT(1000),//|HW_Network.SdiasPLC1.CycleTime;
TO_UDINT(11), "IsoStartPoint", TO_UDINT(50),//|HW_Network.SdiasPLC1.IsoStartPoint;
TO_UDINT(12), "SingleRealloc", TO_UDINT(1),//|HW_Network._base\AM4411\SerialNoStr.SingleRealloc;
TO_UDINT(13), "SingleRealloc", TO_UDINT(1),//|HW_Network._base\AM4412\SerialNoStr.SingleRealloc;
TO_UDINT(14), "SingleRealloc", TO_UDINT(1),//|HW_Network._base\DM1611\SerialNoStr.SingleRealloc;

//Symbolic initialization values
0$UDINT,
0$UDINT,

//Initialization of string values
0$UDINT,
0$UDINT,

//Configuration of tasks (RealTime, Cyclic, Background)
0$UDINT,
2$UDINT,
TO_UDINT(3), (1)$UDINT, 0$DINT, 	//HWCONTROL1
TO_UDINT(4), (1)$UDINT, 4194304$DINT, 	//HWCONTROL1\HWRTPOSTSCAN

0$UDINT,
1$UDINT,
TO_UDINT(3), (1)$UDINT, 8388607$DINT, 	//HWCONTROL1

0$UDINT,
0$UDINT,

//External connections
0$UDINT,
0$UDINT,

//Magic internal connections
0$UDINT,
1$UDINT,
TO_UDINT(8), "SafetyDomainTimeout", TO_UDINT(3), "SafetyDomainTimeout",

//Configuration of timeslots of tasks (RealTime, Cyclic)
#ifdef __LSLLDR_TIMESLOTS__
0$UDINT,
0$UDINT,

0$UDINT,
0$UDINT,

#endif //__LSLLDR_TIMESLOTS__

//MultiMaster connections
#ifdef __LSLLDR_MULTIMASTER__
0$UDINT,
0$UDINT,
#endif //__LSLLDR_MULTIMASTER__

END_FUNCTION